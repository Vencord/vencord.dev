---
export const prerender = true;

import Layout from "layouts/Layout.astro";
import { getSortedFaq } from "scripts/collections";

const faq = await getSortedFaq();

// this sucks, but it's the only way to generate the right data for structured data
// regardless, this only runs at prerender time so it's okay
const rawFaqData = await Astro.glob("../content/faq/*.md");
const structuredData = JSON.stringify({
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: rawFaqData.map(f => ({
        "@type": "Question",
        name: f.frontmatter.title,
        acceptedAnswer: {
            "@type": "Answer",
            text: f.compiledContent(),
        },
    })),
});
---

<Layout
    title="Frequently Asked Questions"
    description="Browse answers to frequently asked questions about Vencord"
    breadcrumbs={[["FAQ", "/faq"]]}
>
    <h1 class="p-page-title">Frequently Asked Questions</h1>
    <p class="p-subtitle">Questions that we're asked often.</p>

    <div class="questions">
        {
            faq.map(async f => {
                const { Content } = await f.render();
                return (
                    <details data-faq-title={f.data.title.replaceAll(" ", "-")}>
                        <summary>{f.data.title}</summary>

                        <div class="faq-content">
                            <Content />
                        </div>
                    </details>
                );
            })
        }
    </div>

    <p>
        Still lost? Visit our <a href="/discord">support server</a> for more assistance!
        We're happy to help.
    </p>

    <script type="application/ld+json" set:html={structuredData} />
</Layout>

<script>
    const faqs = [...document.querySelectorAll("details")];

    const faqTitle = location.hash.slice(1);
    const faq = faqs.find(f => f.dataset.faqTitle === faqTitle);
    if (faq) {
        faq.open = true;
        faq.scrollIntoView({
            behavior: "smooth",
        });
    }

    for (const faq of faqs) {
        faq.addEventListener("toggle", () => {
            const openFaqs = faqs.filter(f => f.open);
            if (openFaqs.length === 1) {
                location.hash = openFaqs[0].dataset.faqTitle!;
            } else {
                location.hash = "";
            }
        });
    }
</script>

<style>
    h1 {
        color: var(--accentAqua);
    }

    .questions {
        display: flex;
        flex-direction: column;
        gap: 1em;
    }

    /* This is mostly copy pasted from https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#try_it */
    details {
        background-color: var(--bg3);
        padding: 0.75em 1em;
        border-radius: 12px;
    }

    summary {
        font-weight: bold;
        cursor: pointer;
    }

    details[open] summary {
        margin-bottom: 0.7em;
    }

    .faq-content {
        background-color: var(--bgCurrentWord);
        color: var(--grey2);
        border-radius: 8px;
        padding: 0.75em;
        margin-bottom: 0.25em;
    }

    details :global(p) {
        margin-top: 0;
    }

    details .faq-content :global(*:last-child) {
        margin-bottom: 0;
    }

    /* style some markdown elements */

    .questions :global(code:not(pre > code)) {
        background-color: var(--bg1);
        border-radius: 5px;
        text-align: center;
        padding: 0 4px;
        margin: 0 2px;
    }

    .questions :global(.astro-code) {
        padding: 1em;
        background-color: var(--bg1) !important;
        border-radius: 6px;
    }
</style>
