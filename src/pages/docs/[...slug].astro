---
export const prerender = true;

import { type CollectionEntry, getCollection } from "astro:content";

import Layout from "layouts/Layout.astro";

export async function getStaticPaths() {
    const docs = await getCollection("docs");
    return docs.map(doc => {
        if (doc.slug.endsWith("index")) {
            return {
                params: {
                    slug:
                        doc.slug === "index"
                            ? undefined
                            : doc.slug.slice(0, -6),
                },
                props: {
                    entry: doc,
                },
            };
        }

        return {
            params: {
                slug: doc.slug,
            },
            props: {
                entry: doc,
            },
        };
    });
}

export interface Props {
    entry: CollectionEntry<"docs">;
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const slug = Astro.params.slug!;

const docCategories = await getCollection("docCategories");
const docmentationPages = await getStaticPaths();

const sidebarEntries: { [section: string]: CollectionEntry<"docs">[] } = {};

for (const page of docmentationPages) {
    const category = docCategories.find(
        category => category.id === page.props.entry.data.category.id
    );

    if (!category) {
        continue;
    }

    if (!sidebarEntries[category.id]) {
        sidebarEntries[category.id] = [];
    }

    sidebarEntries[category.id].push(page.props.entry);
}

const activeCategory = docCategories.find(
    c => c.id === entry.data.category.id
)!;
---

<Layout
    title={`${entry.data.title} | Docs`}
    description={entry.data.description}
    breadcrumbs={[
        ["Docs", "/docs"],
        [entry.data.title, "/docs/" + slug],
    ]}
>
    <h1
        class="p-page-title"
        style={`--accent:var(--${activeCategory.data.accent})`}
    >
        {entry.data.title}
    </h1>
    <p class="p-subtitle">{entry.data.description}</p>
    {
        entry.data.author && (
            <p class="p-subtitle author">Authored by {entry.data.author}.</p>
        )
    }

    <div id="docs-toc">
        <span class="p-overline-l">Table of Contents</span>
        <ul>
            {
                headings.map(header => (
                    <li>
                        <a
                            href={"#" + header.slug}
                            class="p-m"
                            id={`toc-${header.slug}`}
                        >
                            {header.text}
                        </a>
                    </li>
                ))
            }
        </ul>
    </div>

    <div id="doc-content">
        <Content />
    </div>

    <div id="docs-picker">
        <span class="p-overline-l">Documentation</span>
        {
            Object.keys(sidebarEntries).map(categoryId => {
                const category = docCategories.find(c => c.id === categoryId)!;

                const isCategoryActive = sidebarEntries[categoryId].some(
                    page =>
                        page.slug === slug || (page.slug === "index" && !slug)
                );

                return (
                    <details open={isCategoryActive}>
                        <summary
                            class="p-overline-l"
                            style={`--accent:var(--${category.data.accent})`}
                        >
                            {category.data.name}
                        </summary>
                        <ul>
                            {sidebarEntries[categoryId]
                                .sort((a, b) => {
                                    if (a.data.order < b.data.order) {
                                        return -1;
                                    }

                                    if (a.data.order > b.data.order) {
                                        return 1;
                                    }

                                    return 0;
                                })
                                .map(page => {
                                    const active =
                                        page.slug === slug ||
                                        (page.slug === "index" && !slug);

                                    return (
                                        <li class={active ? "active" : ""}>
                                            <a
                                                class="p-m"
                                                href={`/docs/${
                                                    page.slug === "index"
                                                        ? ""
                                                        : page.slug
                                                }`}
                                            >
                                                {page.data.title}
                                            </a>
                                        </li>
                                    );
                                })}
                        </ul>
                    </details>
                );
            })
        }
    </div>

    <div id="edit">
        <a
            href={"https://github.com/Vencord/vencord.dev/blob/main/src/content/docs/" +
                (slug ?? "index") +
                ".md"}
        >
            <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
            >
                <path
                    d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
                ></path>
                <path
                    d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"
                ></path>
            </svg>
        </a>
    </div>
</Layout>

<script>
    window.addEventListener("load", () => {
        const headings = document.querySelectorAll(
            "#doc-content h1,h2,h3,h4,h5,h6"
        );

        document.addEventListener("scroll", e => {
            for (const header of headings) {
                const rect = header.getBoundingClientRect();

                if (rect.top > 0 && rect.top < 150) {
                    const location = window.location.toString().split("#")[0];
                    window.history.replaceState(
                        {},
                        "",
                        location + "#" + header.id
                    );

                    document.querySelectorAll("#docs-toc a").forEach(a => {
                        a.classList.remove("active");
                    });

                    document
                        .querySelector("a#toc-" + header.id)
                        ?.classList.add("active");

                    break;
                }
            }
        });
    });
</script>

<style>
    h1 {
        color: var(--accent);
    }

    /* dirty anchor positioning fix, sorry ven */
    #doc-content :global(h1, h2, h3, h4, h5, h6) {
        margin-top: -1.5em;
        padding-top: 1.5em;
    }

    #docs-toc,
    #docs-picker {
        display: flex;
        flex-direction: column;

        gap: 1em;

        position: fixed;
        top: 6.5em;

        width: calc(var(--horizontal-margin) - 4em);
        height: calc(100% - 13em);
    }

    #docs-toc {
        right: 2em;
        padding-left: 1em;
        border-left: 1px solid var(--bg5);
    }

    #docs-picker {
        left: 2em;
        padding-right: 1em;
        border-right: 1px solid var(--bg5);
    }

    #edit {
        position: absolute;
        top: 0;
        right: 0;
    }

    ul {
        padding: 0;
        margin-top: 0.25em;
        margin-bottom: 0;
    }

    #docs-toc ul {
        margin-top: -0.75em; /* this is horrible */
    }

    li {
        list-style: none;

        padding: 0.25em 1em;
    }

    a {
        color: var(--fg0) !important;
        text-decoration: none;
    }

    .active {
        font-weight: var(--fontWeightSemiBold);
    }

    .author {
        margin-top: -0.75em; /* tuck a little closer, not too much though */
    }

    summary {
        color: var(--accent);
        cursor: pointer;
    }

    @media (max-width: 1200px) {
        #docs-toc,
        #docs-picker {
            position: unset;
            width: 100%;
        }

        #docs-toc {
            border-left: 0;
            border-bottom: 1px solid var(--bg5);
            padding-bottom: 1em;
            padding-left: 0;
        }

        #docs-picker {
            border-right: 0;
            border-top: 1px solid var(--bg5);
            padding-top: 1em;
            padding-right: 0;
        }
    }

    #doc-content :global(code:not(pre > code)) {
        background: var(--bg0);

        border-radius: 5px;
        text-align: center;
        padding: 0 4px;
        margin: 0 2px;
    }

    #doc-content :global(.astro-code) {
        padding: 1em;
        border-radius: 6px;
    }
</style>
